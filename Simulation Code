import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import random
import matplotlib.image as mpimg
from scipy import misc

# Creating a "Light" class to represent a light source with its position, direction, intensity, and color.
class Light:
    def __init__(self, position, direction, intensity, color):
        self.position = position
        self.direction = direction
        self.intensity = intensity
        self.color = color

# This function depicts light as a quiver plot. It also explains it with text.
def draw_light(ax, light):
    intensity = light.intensity / 11
    ax.quiver(light.position[0], light.position[1], light.direction[0], light.direction[1],
              angles='xy', scale_units='xy', scale=1, color=light.color, alpha=intensity)
    text_position = [light.position[0] + light.direction[0], light.position[1] + light.direction[1]]
    ax.text(light.position[0], light.position[1], f"Color: {light.color}\nIntensity: {light.intensity}",
            horizontalalignment='center', verticalalignment='bottom', fontsize=8)

# Creating a "SmokeMachine" class to represent a smoke machine with its position, direction, intensity, and diffusion type.
class SmokeMachine:
    def __init__(self, position, direction, intensity, diffusion_type):
        self.position = position
        self.direction = direction
        self.intensity = intensity
        self.diffusion_type = diffusion_type

# This function depicts the smoke machine as a filled circle.
def draw_smoke_machine(ax, smoke_machine, smoke_grid):
    intensity = smoke_machine.intensity / 11
    ax.add_artist(plt.Circle(smoke_machine.position, 20, color='crimson', alpha=intensity))
    ax.imshow(smoke_grid, cmap='gray', alpha=intensity, extent=(0, 500, 0, 500))

    # Update the position of the smoke machine circles
    for artist in ax.artists:
        if isinstance(artist, plt.Circle):
            artist.center = (smoke_machine.position[0], smoke_machine.position[1])

# Creating a "Band" class to represent the band with its position and shape.
class Band:
    def __init__(self, position, shape):
        self.position = position
        self.shape = shape

# This function draws the band on stage.
def draw_band(ax, band):
    ax.fill(*band.shape, color='purple')

# Add an image of rock stars on the stage
image_path = 'G:/Writeup/SOMIA/Spinal Tap/rockstar.png'
image = mpimg.imread(image_path)

# Create lights. Creating five instances of the Light class with positions, directions, intensities, and colors.
light1 = Light([30, 30], [0, -1], 8, 'yellow')
light2 = Light([130, 30], [0, -1], 6, 'orange')
light3 = Light([230, 30], [0, -1], 11, 'red')
light4 = Light([330, 30], [0, -1], 9, 'blue')
light5 = Light([430, 30], [0, -1], 7, 'green')
background = Light([500, 500], [0, -1], 7, 'black')

# lights_ax1 = [light1, light2, light3, light4, light5, background]
lights = [light1, light2, light3, light4, light5, background]

# Create a band object with position and shape.
band = Band([250, 200], [[200, 280, 280, 200], [40, 40, 80, 80]])

# Create a new shape for the band representing a drum
radius_outer = 50
radius_inner = 30
center_x, center_y = 240, 160
theta = np.linspace(0, 2 * np.pi, 100)
x_outer = center_x + radius_outer * np.cos(theta)
y_outer = center_y + radius_outer * np.sin(theta)
x_inner = center_x + radius_inner * np.cos(theta)
y_inner = center_y + radius_inner * np.sin(theta)
new_shape = [np.concatenate((x_outer, x_inner[::-1])).tolist(), np.concatenate((y_outer, y_inner[::-1])).tolist()]

# Update the band's shape
band.shape = new_shape

# Create a smoke machine instance with position, direction, intensity, and diffusion type.
smoke_machine = SmokeMachine([30, 30], [1, 0], 9, 'Moore')
smoke_machine2 = SmokeMachine([430, 30], [1, 0], 9, 'Moore')

# Initialize the smoke grid
smoke_grid = np.zeros((500, 500), dtype=np.float64)

# Create a rectangle patch for the stage
stage_rect = Rectangle((0, 0), 500, 100, color='gray')

# Creating stage view with figure and subplots
fig, (ax0, ax1) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [1, 10]}, figsize=(10, 10))

# Set aspect ratios. To ensure that x-axis and y-axis have the same scale.
ax1.set_aspect("equal")
ax0.set_aspect("equal")

# Drawing the upper subplot with small circles
ax0.fill([0, 500, 500, 0], [0, 0, 50, 50], color="black")
circle1 = plt.Circle([30, 25], 20, color="yellow")
ax0.add_patch(circle1)
circle1 = plt.Circle([140, 25], 20, color="orange")
ax0.add_patch(circle1)
circle1 = plt.Circle([250, 25], 20, color="red")
ax0.add_patch(circle1)
circle1 = plt.Circle([360, 25], 20, color="blue")
ax0.add_patch(circle1)
circle1 = plt.Circle([470, 25], 20, color="green")
ax0.add_patch(circle1)

# Drawing lights of different colors in the lower subplot
ax1.fill([0, 500, 500, 0], [0, 0, 500, 500], color="black")
ax1.fill([30, 70, 70, 30], [500, 500, 500, 500], color="yellow")
ax1.fill([30, 70, 130, 0], [500, 500, 0, 0], color="yellow")
ax1.fill([130, 170, 170, 130], [500, 500, 500, 500], color="orange")
ax1.fill([130, 170, 230, 70], [500, 500, 0, 0], color="orange")
ax1.fill([230, 270, 270, 230], [500, 500, 500, 500], color="red")
ax1.fill([230, 270, 330, 170], [500, 500, 0, 0], color="red")
ax1.fill([330, 370, 370, 330], [500, 500, 500, 500], color="blue")
ax1.fill([330, 370, 430, 270], [500, 500, 0, 0], color="blue")
ax1.fill([430, 470, 470, 430], [500, 500, 500, 500], color="green")
ax1.fill([430, 470, 500, 370], [500, 500, 0, 0], color="green")

# Add the illusion of a 3D stage
stage_height = 100  # Height of the stage illusion
stage_width = 500

ax1.imshow(image, extent=(0, 500, 0, 100), alpha=0.8, zorder=10)

# Drawing smoke machine by calling the "draw_smoke_machine" function defined above.
draw_smoke_machine(ax1, smoke_machine, smoke_grid)
draw_smoke_machine(ax1, smoke_machine2, smoke_grid)

# Drawing band by calling the "draw_band" function defined above.
draw_band(ax1, band)

user_choice = input("What do you want to see?\n1. Static Stage\n2. Animation\n3. Moving Band\n")

if(user_choice == '1'):
    plt.suptitle("PERFORMANCE STAGE FOR \"SPINAL TAP\"", fontsize="18")
    plt.show()

elif(user_choice == '2'):
    # Set titles and display the plot
    plt.suptitle("PERFORMANCE STAGE FOR \"SPINAL TAP\"", fontsize="18")

    # Creating smoke around the smoke machines
    circle_radius = 15
    i = 1
    # Iterate 20 times to change the colors of the lights
    for i in range(40):
        # Draw the lights with updated colors
        for light in lights:
            if light.color == 'red':
                light.color = 'yellow'
            elif light.color == 'yellow':
                light.color = 'orange'
            elif light.color == 'orange':
                light.color = 'green'
            elif light.color == 'green':
                light.color = 'blue'
            elif light.color == 'blue':
                light.color = 'red'

        # Update previous lights in ax1 with their exact dimensions and updated colors
        ax1.patches[0].set_color(lights[5].color)
        ax1.patches[1].set_color(lights[4].color)
        ax1.patches[2].set_color(lights[3].color)
        ax1.patches[3].set_color(lights[2].color)
        ax1.patches[4].set_color(lights[1].color)
        ax1.patches[5].set_color(lights[0].color)
        ax1.patches[6].set_color(light1.color)
        ax1.patches[7].set_color(light2.color)
        ax1.patches[8].set_color(light3.color)
        ax1.patches[9].set_color(light4.color)
        ax1.patches[10].set_color(light5.color)

        # Update previous lights in ax0 with updated colors
        ax0.patches[0].set_color(lights[5].color)
        ax0.patches[1].set_color(lights[4].color)
        ax0.patches[2].set_color(lights[3].color)
        ax0.patches[3].set_color(lights[2].color)
        ax0.patches[4].set_color(lights[1].color)
        ax0.patches[5].set_color(lights[0].color)

        x = random.uniform(smoke_machine.position[0] - 60, smoke_machine.position[0] + 60)
        y = random.uniform(smoke_machine.position[1] - 60, smoke_machine.position[1] + 60)
        circle_color = random.choice(['red', 'green', 'purple', 'black', 'orange', 'blue', 'violet'])
        circle = plt.Circle((x, y), circle_radius, color=circle_color, alpha=1)
        ax1.add_artist(circle)

        x = random.uniform(smoke_machine2.position[0] - 60, smoke_machine.position[0] + 60)
        y = random.uniform(smoke_machine2.position[1] - 60, smoke_machine.position[1] + 60)
        circle_color = random.choice(['red', 'green', 'purple', 'black', 'orange', 'blue', 'violet'])
        circle = plt.Circle((x, y), circle_radius, color=circle_color, alpha=1)
        ax1.add_artist(circle)

        print("Time in seconds: ", i)

        # Pause for visualization
        plt.pause(0.1)

    plt.show()

elif(user_choice == '3'):
    # Set titles and display the plot
    plt.suptitle("PERFORMANCE STAGE FOR \"SPINAL TAP\"", fontsize="18")
    ax1.clear()

    # Set aspect ratios. To ensure that x-axis and y-axis have the same scale.
    ax1.set_aspect("equal")
    ax0.set_aspect("equal")

    # Redraw the necessary elements
    ax1.fill([0, 500, 500, 0], [0, 0, 500, 500], color="black")
    ax1.fill([30, 70, 70, 30], [500, 500, 500, 500], color="yellow")
    ax1.fill([30, 70, 130, 0], [500, 500, 0, 0], color="yellow")
    ax1.fill([130, 170, 170, 130], [500, 500, 500, 500], color="orange")
    ax1.fill([130, 170, 230, 70], [500, 500, 0, 0], color="orange")
    ax1.fill([230, 270, 270, 230], [500, 500, 500, 500], color="red")
    ax1.fill([230, 270, 330, 170], [500, 500, 0, 0], color="red")
    ax1.fill([330, 370, 370, 330], [500, 500, 500, 500], color="blue")
    ax1.fill([330, 370, 430, 270], [500, 500, 0, 0], color="blue")
    ax1.fill([430, 470, 470, 430], [500, 500, 500, 500], color="green")
    ax1.fill([430, 470, 500, 370], [500, 500, 0, 0], color="green")

    # Define the initial position and velocity of the image
    image_position = [10, 50]
    image_velocity = 42
    image_obj = OffsetImage(image, zoom=0.2, alpha=1)
    image_annotation = AnnotationBbox(image_obj, image_position, frameon=False)
    ax1.add_artist(image_annotation)

    # Creating smoke around the smoke machines
    circle_radius = 15
    i = 1
    # Iterate 20 times to change the colors of the lights
    for i in range(10):
        # Draw the lights with updated colors
        for light in lights:
            if light.color == 'red':
                light.color = 'yellow'
            elif light.color == 'yellow':
                light.color = 'orange'
            elif light.color == 'orange':
                light.color = 'green'
            elif light.color == 'green':
                light.color = 'blue'
            elif light.color == 'blue':
                light.color = 'red'

        # Update previous lights in ax1 with their exact dimensions and updated colors
        ax1.patches[0].set_color(lights[5].color)
        ax1.patches[1].set_color(lights[4].color)
        ax1.patches[2].set_color(lights[3].color)
        ax1.patches[3].set_color(lights[2].color)
        ax1.patches[4].set_color(lights[1].color)
        ax1.patches[5].set_color(lights[0].color)
        ax1.patches[6].set_color(light1.color)
        ax1.patches[7].set_color(light2.color)
        ax1.patches[8].set_color(light3.color)
        ax1.patches[9].set_color(light4.color)
        ax1.patches[10].set_color(light5.color)

        # Update previous lights in ax0 with updated colors
        ax0.patches[0].set_color(lights[5].color)
        ax0.patches[1].set_color(lights[4].color)
        ax0.patches[2].set_color(lights[3].color)
        ax0.patches[3].set_color(lights[2].color)
        ax0.patches[4].set_color(lights[1].color)
        ax0.patches[5].set_color(lights[0].color)

        x = random.uniform(smoke_machine.position[0] - 60, smoke_machine.position[0] + 60)
        y = random.uniform(smoke_machine.position[1] - 60, smoke_machine.position[1] + 60)
        circle_color = random.choice(['gray', 'gray', 'gray', 'gray'])
        circle = plt.Circle((x, y), circle_radius, color=circle_color, alpha=1)
        ax1.add_artist(circle)

        x = random.uniform(smoke_machine2.position[0] - 60, smoke_machine.position[0] + 60)
        y = random.uniform(smoke_machine2.position[1] - 60, smoke_machine.position[1] + 60)
        circle_color = random.choice(['gray', 'gray', 'gray', 'gray'])
        circle = plt.Circle((x, y), circle_radius, color=circle_color, alpha=1)
        ax1.add_artist(circle)

        print("Time in seconds: ", i)

        # Update the image position
        image_position[0] += image_velocity

        image_annotation.xy = image_position

        # Pause for visualization
        plt.pause(0.2)

    plt.show()


else:
    print("Please enter a valid choice. Thank you!")

